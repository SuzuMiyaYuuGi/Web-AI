import streamlit as st
from qa_engine import answer_question

# ---------------- NEW: imports & helpers ----------------
import pandas as pd
import os

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ‚Äî ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠
st.set_page_config(page_title="üîç TISTR AI Search", layout="wide")

# ‡∏â‡∏µ‡∏î CSS ‡πÉ‡∏´‡πâ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏ô‡πâ‡∏≤ + ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏õ
st.markdown("""
<style>
/* ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡∏∞‡∏°‡∏µ padding ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ */
.main .block-container {
  max-width: 1400px;
  padding-left: 2rem;
  padding-right: 2rem;
}

/* ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á/‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á dialog (‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏õ) */
div[role="dialog"] {
  width: 92vw !important;
  max-width: 1400px !important;
}

/* ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏ô‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏õ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞‡∏™‡∏π‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≠ */
div[role="dialog"] > div {
  max-height: 82vh;
  overflow: auto;
  padding-bottom: 0.5rem;
}

/* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ DataFrame ‡πÉ‡∏ô‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏õ */
div[role="dialog"] .stDataFrame {
  height: 70vh !important;
}

/* ‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏ä‡∏±‡∏î */
button[kind="primary"] {
  transform: translateZ(0);
}
</style>
""", unsafe_allow_html=True)


@st.cache_data(show_spinner=False)
def _load_products(csv_path="Product List.csv"):
    """‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ + ‡∏ó‡∏≥‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô: ID / ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ / ‡∏®‡∏π‡∏ô‡∏¢‡πå / link"""
    if not os.path.exists(csv_path):
        return pd.DataFrame(columns=["ID", "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏®‡∏π‡∏ô‡∏¢‡πå", "link"])

    # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢ encoding
    encodings = [None, "utf-8-sig", "cp874", "latin-1"]
    last_err = None
    df = None
    for enc in encodings:
        try:
            df = pd.read_csv(csv_path, encoding=enc) if enc else pd.read_csv(csv_path)
            break
        except Exception as e:
            last_err = e
    if df is None:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ: {last_err}")
        return pd.DataFrame(columns=["ID", "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏®‡∏π‡∏ô‡∏¢‡πå", "link"])

    # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
    rename_map = {}
    cols_norm = {c.lower().strip(): c for c in df.columns}

    if "id" in cols_norm: rename_map[cols_norm["id"]] = "ID"
    for key in ["name", "product", "product name", "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"]:
        if key in cols_norm: rename_map[cols_norm[key]] = "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"; break
    for key in ["center", "‡∏®‡∏π‡∏ô‡∏¢‡πå", "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏á‡∏≤‡∏ô", "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô"]:
        if key in cols_norm: rename_map[cols_norm[key]] = "‡∏®‡∏π‡∏ô‡∏¢‡πå"; break
    # ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á "‡∏•‡∏¥‡∏á‡∏Å‡πå" ‡πÅ‡∏•‡∏∞ "‡∏•‡∏¥‡πâ‡∏á‡∏Ñ‡πå" + url
    for key in ["link", "url", "‡∏•‡∏¥‡∏á‡∏Å‡πå", "‡∏•‡∏¥‡πâ‡∏á‡∏Ñ‡πå"]:
        if key in cols_norm: rename_map[cols_norm[key]] = "link"; break

    df = df.rename(columns=rename_map)

    # ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö
    for col in ["ID", "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏®‡∏π‡∏ô‡∏¢‡πå", "link"]:
        if col not in df.columns:
            df[col] = ""

    # ‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏±‡∏ß‚Äì‡∏ó‡πâ‡∏≤‡∏¢ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î
    for col in ["ID", "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏®‡∏π‡∏ô‡∏¢‡πå", "link"]:
        df[col] = df[col].astype(str).fillna("").str.strip()

    # ‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    df = df[["ID", "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏®‡∏π‡∏ô‡∏¢‡πå", "link"]].copy()
    return df


def _is_valid_url(u: str) -> bool:
    u = str(u or "").strip().lower()
    return u.startswith("http://") or u.startswith("https://")


def _filter_products(df, keyword="", center="‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
    if df.empty:
        return df

    filtered = df.copy()

    # ‡πÉ‡∏ä‡πâ regex=False ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ï‡∏£‡∏á ‡πÜ (‡∏Å‡∏±‡∏ô‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏≥‡∏û‡∏±‡∏á)
    if center and center != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        filtered = filtered[
            filtered["‡∏®‡∏π‡∏ô‡∏¢‡πå"].str.contains(center, case=False, na=False, regex=False)
        ]

    if keyword:
        kw = keyword.strip().lower()
        mask = (
            filtered["ID"].str.lower().str.contains(kw, na=False) |
            filtered["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"].str.lower().str.contains(kw, na=False) |
            filtered["‡∏®‡∏π‡∏ô‡∏¢‡πå"].str.lower().str.contains(kw, na=False) |
            filtered["link"].str.lower().str.contains(kw, na=False)
        )
        filtered = filtered[mask]

    return filtered.reset_index(drop=True)


def _products_ui(df):
    # ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
    cols = st.columns([2, 1])
    keyword = cols[0].text_input("üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ / ID / ‡∏®‡∏π‡∏ô‡∏¢‡πå ...", key="products_kw")
    centers = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + sorted([c for c in df["‡∏®‡∏π‡∏ô‡∏¢‡πå"].dropna().astype(str).unique() if c.strip()])
    center = cols[1].selectbox("‡∏®‡∏π‡∏ô‡∏¢‡πå", centers, index=0, key="products_center")

    filtered = _filter_products(df, keyword, center)

    # ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå link:
    # - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô URL: ‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤ URL ‡πÑ‡∏ß‡πâ ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Å‡∏î‡πÑ‡∏î‡πâ
    # - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ / ‡∏ß‡πà‡∏≤‡∏á / NaN: ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
    df_show = filtered.copy()
    df_show["link"] = df_show["link"].apply(lambda u: (u if _is_valid_url(u) else ""))

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    st.dataframe(
        df_show[["ID", "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏®‡∏π‡∏ô‡∏¢‡πå", "link"]],
        use_container_width=True,
        height=560,
        column_config={
            "link": st.column_config.LinkColumn("link", display_text="‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö"),
        }
    )

    # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏•‡∏Å‡∏£‡∏≠‡∏á
    csv = df_show.to_csv(index=False).encode("utf-8-sig")
    st.download_button("‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (CSV)", data=csv, file_name="products_filtered.csv", mime="text/csv")


# ---------------- Header / Intro ----------------
st.title("üîç ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ñ‡∏≤‡∏°-‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå TISTR")
st.markdown("‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ñ‡∏≤‡∏°-‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå TISTR! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö TISTR ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà")

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡∏à‡∏≤‡∏Å session_state ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
if "popular_questions" not in st.session_state:
    st.session_state.popular_questions = []

# ---------------- NEW: ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á ----------------
if "products_df" not in st.session_state:
    st.session_state.products_df = _load_products()

# ---------------- NEW: ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ----------------
st.markdown("### üßæ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
open_btn = st.button("üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤/‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£")

# ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏ä‡πâ st.dialog (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏õ; ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ä‡πâ fallback
if hasattr(st, "dialog"):
    @st.dialog("üßæ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ)")
    def products_modal():
        _products_ui(st.session_state.products_df)

    if open_btn:
        products_modal()
else:
    # Fallback: ‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡πÑ‡∏°‡πà‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏õ ‡πÅ‡∏ï‡πà‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á)
    if open_btn:
        with st.expander("üßæ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Fallback ‡πÇ‡∏´‡∏°‡∏î)", expanded=True):
            _products_ui(st.session_state.products_df)

# ---------------- ‡πÄ‡∏î‡∏¥‡∏°: ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ñ‡∏≤‡∏°-‡∏ï‡∏≠‡∏ö ----------------
question = st.text_input(
    "‚ùì ‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
    value=st.session_state.get("selected_question", "")
)

if st.button("üì§ ‡∏ñ‡∏≤‡∏°‡πÄ‡∏•‡∏¢") and question:
    with st.spinner("üß† ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•..."):
        answer = answer_question(question)
        st.markdown("### üìÑ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö")
        st.markdown(answer)
    st.session_state.selected_question = ""  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö
